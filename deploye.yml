---
# ECS Task Definitions and Services for the Employee Management System

# Notes:
# 1. Replace YOUR_AWS_ACCOUNT_ID with your actual AWS Account ID.
# 2. Replace YOUR_ECR_BASE_URL with your ECR repository URL (e.g., 123456789012.dkr.ecr.us-east-1.amazonaws.com).
# 3. The Subnet and Security Group IDs are placeholders. You should get the actual values from the output of the create_ecs_infra.sh script.
# 4. This template assumes you have built and pushed Docker images for each service to your ECR repository.

# ---------------------------------------------------
# Eureka Server
# ---------------------------------------------------

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy Eureka Server to ECS'

Parameters:
  VpcId:
    Type: String
    Description: The VPC ID for the ECS cluster.
  PublicSubnet1:
    Type: String
    Description: Public Subnet 1 ID.
  PublicSubnet2:
    Type: String
    Description: Public Subnet 2 ID.
  AlbSecurityGroup:
    Type: String
    Description: Security Group for the ALB.
  EcsServiceSecurityGroup:
    Type: String
    Description: Security Group for the ECS Services.
  ClusterName:
    Type: String
    Default: my-ecs-cluster
  EcrBaseUrl:
    Type: String
    Description: Base URL for your ECR repository.
  AccountId:
    Type: String
    Description: Your AWS Account ID.

Resources:
  EurekaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: eurekaserver-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Sub "arn:aws:iam::${AccountId}:role/ecsTaskExecutionRole"
      ContainerDefinitions:
        - Name: eurekaserver
          Image: !Sub "${EcrBaseUrl}/eurekaserver:latest"
          PortMappings:
            - ContainerPort: 8761

  EurekaService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: eurekaserver-service
      Cluster: !Ref ClusterName
      TaskDefinition: !Ref EurekaTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
          SecurityGroups: [!Ref EcsServiceSecurityGroup]
      LoadBalancers:
        - TargetGroupArn: !Ref EurekaTargetGroup
          ContainerName: eurekaserver
          ContainerPort: 8761

  EurekaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: eurekaserver-tg
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 8761
      HealthCheckPath: /
      TargetType: ip

  EurekaListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !ImportValue EcsAlberListenerArn
      Priority: 1
      Actions:
        - Type: forward
          TargetGroupArn: !Ref EurekaTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/eureka/*]

# ---------------------------------------------------
# Backend Spring Boot Application
# ---------------------------------------------------

  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: backend-springboot-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Sub "arn:aws:iam::${AccountId}:role/ecsTaskExecutionRole"
      ContainerDefinitions:
        - Name: backend-springboot
          Image: !Sub "${EcrBaseUrl}/backend-springboot:latest"
          PortMappings:
            - ContainerPort: 8080
          Environment:
            - Name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
              Value: http://eurekaserver-service:8761/eureka

  BackendService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: backend-springboot-service
      Cluster: !Ref ClusterName
      TaskDefinition: !Ref BackendTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
          SecurityGroups: [!Ref EcsServiceSecurityGroup]
      LoadBalancers:
        - TargetGroupArn: !Ref BackendTargetGroup
          ContainerName: backend-springboot
          ContainerPort: 8080
      ServiceRegistries:
        - RegistryArn: !GetAtt EurekaService.ServiceRegistries[0].RegistryArn

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: backend-springboot-tg
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 8080
      HealthCheckPath: /actuator/health
      TargetType: ip

  BackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !ImportValue EcsAlberListenerArn
      Priority: 2
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/api/employees/*]

# Repeat similar blocks for inventorybackend, orderbackend, and productbackend
# For brevity, only one additional service is shown here.

# ---------------------------------------------------
# Product Backend
# ---------------------------------------------------

  ProductTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: productbackend-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Sub "arn:aws:iam::${AccountId}:role/ecsTaskExecutionRole"
      ContainerDefinitions:
        - Name: productbackend
          Image: !Sub "${EcrBaseUrl}/productbackend:latest"
          PortMappings:
            - ContainerPort: 8080
          Environment:
            - Name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE
              Value: http://eurekaserver-service:8761/eureka

  ProductService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: productbackend-service
      Cluster: !Ref ClusterName
      TaskDefinition: !Ref ProductTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
          SecurityGroups: [!Ref EcsServiceSecurityGroup]
      LoadBalancers:
        - TargetGroupArn: !Ref ProductTargetGroup
          ContainerName: productbackend
          ContainerPort: 8080
      ServiceRegistries:
        - RegistryArn: !GetAtt EurekaService.ServiceRegistries[0].RegistryArn

  ProductTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: productbackend-tg
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 8080
      HealthCheckPath: /actuator/health
      TargetType: ip

  ProductListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !ImportValue EcsAlberListenerArn
      Priority: 3
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ProductTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/api/products/*]
